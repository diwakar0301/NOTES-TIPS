method Fails--> checkMethod1(a,anyString())  ---> throws error/exception/not pass    ---------> where a is of type String #argumentmatchers
method Pass--> checkMethod2(eq(a),anyString())  ---> will pass without any error/exception ---------> where a is of type String #argumentmatchers
when().thenThrow() won't work for the void return types so we can use doThrow().when()

--------------------------------*****************************------------------------
How to use mockito in the following cases?


private method --> Mockito doesn't mock private methods but power mock can
final class  --> latest version supports mocking of final class #since 2.1.0 &  but spying not possible
final method  --> latest version supports mocking of final method #since 2.1.0 &  but spying not possible
void methods  --> answer--> doThrow(),doNothing() ,doReturn(),doAnswer(),doCallRealMethod() --> used to stub void methods
JKS & cyborg & spring security??
jenkins and Urbancode build??
difference between bitbucket and github??

---------------------------***********-------------------------------
@InjectMocks,@Mock -> when().thenReturn() ---> for mocking object
@InjectMocks,@Spy -> when().thenCallRealMethod() ---> for spying on real object

-----------------------------***********-----------------------------
@InjectMocks --> works only on classes
@Mock ----->  works on both classes and interfaces
@Spy ------>  works only on classes ----  &  ----> works only on real methods of interfaces but not works on abstract method
--------------------******************--------------------------
check for two mocks in a method
check  test for void return type  ---> we can use verify method to check it whether it is triggered or not & verify method will work only after the assert method 
                          AND ALSO CHECK THE FOLLOWING EXCEPTION FOR THE CORRECT USE OF VERIFY METHOD
org.mockito.exceptions.misusing.NotAMockException: 
Argument passed to verify() is of type ServiceClass1 and is not a mock!
Make sure you place the parenthesis correctly!
See the examples of correct verifications:
    verify(mock).someMethod();
    verify(mock, times(10)).someMethod();
    verify(mock, atLeastOnce()).someMethod();
--------------------------------------*****************************--------------------------------
//extends AbstractTestNGSpringContextTests //use this for safer side
	@Mock
	private DaoClass1 dc1;
	@BeforeMethod //use this for safer side 
	public void set() {
			MockitoAnnotations.initMocks(this);  //use this for safer side
	}
  
  
  -------------------------------------------********************************---------------------------------
                          POWER MOCK DEPENDENCIES
powermock-api-mockito2: This is the core PowerMock dependency and used to extend Mockito2 mocking framework. 
If you are using Mockito 1.x versions then use powermock-api-mockito module.

powermock-module-junit4: For running JUnit 4 test cases using PowerMock.

powermock-module-testng: For running TestNG test cases and supporting PowerMock.

PowerMock provides extended features for Mockito, one of them is the ability to test static methods. Itâ€™s easily integrated with JUnit 4 and TestNG. 
However, there is no near-term support plan for JUnit 5.


 <dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>2.19.0</version>
			<scope>test</scope>
		</dependency>
		 
		 
  <dependency>  
    <groupId>org.powermock</groupId>  
    <artifactId>powermock-api-mockito2</artifactId>  
    <version>2.0.9</version>  
    <scope>test</scope>  
</dependency>  
<dependency>  
    <groupId>org.powermock</groupId>  
    <artifactId>powermock-module-junit4</artifactId>  
    <version>2.0.9</version>  
    <scope>test</scope>  
</dependency>  
	<!-- https://mvnrepository.com/artifact/org.powermock/powermock-module-testng -->
<dependency>
    <groupId>org.powermock</groupId>
    <artifactId>powermock-module-testng</artifactId>
    <version>2.0.9</version>
    <scope>test</scope>
</dependency>